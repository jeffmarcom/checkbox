#!/usr/bin/env python3
"""
Copyright (C) 2013 Canonical Ltd.

Authors
  Jeff Marcom <jeff.marcom@canonical.com>

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License version 3,
as published by the Free Software Foundation.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.
"""

from argparse import ArgumentParser
import base64
import datetime
import json
import logging
import os
import random
import sys
import time

from cloudbox.openstack.config import openstack_config
from cloudbox.openstack.api import API as openstack_api

# Default CFG Values for Instance and Volume tests. These values are
# intentionally hard coded here within the script as they
# are considered part of certification criteria

INSTANCE_POLLING_INTERVAL = 20
INSTANCE_POLLING_REPEAT = 10

VOLUME_POLLING_INTERVAL = 5
VOLUME_POLLING_REPEAT = 5


class Instance(object):

    def __init__(self, instance_name, image_name="", flavor_id=""):
        self.instance_name = "-".join((
            instance_name, str(random.randint(1, 1000000))))
        self.image_name = image_name
        self.flavor_id = flavor_id

    def launch(self, num_of_instances=1, user_data=None):
        logging.debug("Launching instance: %s", self.instance_name)

        # Get image id
        image_id = ""
        id_data = openstack_api("glance").request("list_images")
        for values in id_data["images"]:
            if values["name"] == self.image_name:
                image_id = values["id"]
                break

        meta_data = {"server": {
                     "flavorRef": self.flavor_id,
                     "imageRef": image_id,
                     "name": self.instance_name,
                     "personality": [{
                     "contents": "",
                     "path": ""}],
                 }
        }

        params = json.dumps(meta_data)
        output = openstack_api("nova").request(
            "create_server", params)

        ret_val = 1
        # Check to be sure it was created successfully
        data = openstack_api("nova").request("list_servers")
        for server in data["servers"]:
            if server["name"] == self.instance_name:
                instance_id = server["id"]
                ret_val = 0

        return ret_val, instance_id

    def get_console_output(self, instance_id, length=100):
        """
        Returns boot log of launched instance. Specify length for
        the amount of lines you'd like to have returned.
        """

        meta_data = {
            "os-getConsoleOutput": {
            "length": length
            }
        }

        params = json.dumps(meta_data)
        api_obj = openstack_api("nova")
        api_obj.page_tac = "/" + instance_id + "/action"
        return api_obj.request("server_console", params)


def instance_test(args):
    print("Executing Nova Instance Test", file=sys.stderr)
    exit_code = 1

    # Instance configuration parameters
    instance_name = openstack_config.Compute["instance_name"]
    flavor_id = openstack_config.Compute["flavor_id"]
    image_name = openstack_config.Image["image_name"]

    test = Instance(instance_name, image_name, flavor_id)

    if args.launch:
        exit_code, instance_id = test.launch(1)

        # Wait for image to boot
        print("Waiting for instance id: %s to boot..." % instance_id,
              file=sys.stderr)
        state = ""
        for inc in range(0, INSTANCE_POLLING_REPEAT):
            api_obj = openstack_api("nova")
            # Set page tac to look for details with a
            # specific server identifier
            api_obj.page_tac = "/" + instance_id
            time.sleep(INSTANCE_POLLING_INTERVAL)
            # Poll for information
            print("Polling...", file=sys.stderr)
            server_info = api_obj.request("list_servers")

            # Retrieve current state
            try:
                state = server_info["server"]["status"]
            except KeyError as parse_exception:
                print("No meta_data for instance", file=sys.stderr)
                break
            if "RUNNING" in state:
                logging.debug("Instance is running")
                break
            elif "ERROR" in state:
                logging.debug("Critical instance launch error")
                break

        boot_log = test.get_console_output(instance_id, 50)
        print(boot_log["output"], file=sys.stderr)

        if "boot finished" not in boot_log["output"]:
            print("Failed to boot instance", file=sys.stderr)
            exit_code = 1
        else:
            print("Instance booted successfully", file=sys.stderr)

    sys.exit(exit_code)


def main():
    cli_parser = ArgumentParser(description="Openstack Nova Compute Testing")
    subparsers = cli_parser.add_subparsers()

    # High-level options
    cli_parser.add_argument("--debug", action="store_true")

    # Sub-Main cli options
    instance_test_parser = subparsers.add_parser(
        'instance', help=("openstack nova instance test"))

    # Sub test options
    instance_test_parser.add_argument('--launch', action="store_true")
    instance_test_parser.add_argument('--debug', action="store_true")

    instance_test_parser.set_defaults(func=instance_test)

    args = cli_parser.parse_args()

    if args.debug:
        logging.basicConfig(level=logging.DEBUG)

    args.func(args)

if __name__ == '__main__':
    main()
